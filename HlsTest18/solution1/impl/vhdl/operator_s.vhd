-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (19 downto 0);
    y_V : IN STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of operator_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv13_1A : STD_LOGIC_VECTOR (12 downto 0) := "0000000011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_start : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fir1_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir1_shift_reg0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fir1_shift_reg0_V_ce0 : STD_LOGIC;
    signal fir1_shift_reg0_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal fir1_shift_reg0_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fir1_shift_reg0_V_ce1 : STD_LOGIC;
    signal fir1_shift_reg0_V_we1 : STD_LOGIC;
    signal fir1_shift_reg0_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal CFir_c_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal CFir_c_V_ce0 : STD_LOGIC;
    signal CFir_c_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal fir1_shift_reg1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fir1_shift_reg1_V_ce0 : STD_LOGIC;
    signal fir1_shift_reg1_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal fir1_shift_reg1_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fir1_shift_reg1_V_ce1 : STD_LOGIC;
    signal fir1_shift_reg1_V_we1 : STD_LOGIC;
    signal fir1_shift_reg1_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal reg_191 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal fir1_count_load_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_204_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_reg_402 : STD_LOGIC_VECTOR (12 downto 0);
    signal CFir_c_V_addr_reg_407 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_360_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_412 : STD_LOGIC_VECTOR (12 downto 0);
    signal fir1_shift_reg0_V_ad_reg_418 : STD_LOGIC_VECTOR (11 downto 0);
    signal fir1_shift_reg1_V_ad_reg_423 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_219_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_431 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_257_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_10_fu_257_p2 : signal is "no";
    signal tmp_10_reg_441 : STD_LOGIC_VECTOR (12 downto 0);
    signal fir1_shift_reg0_V_lo_reg_456 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_s_reg_168 : STD_LOGIC_VECTOR (41 downto 0);
    signal i1_reg_180 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast1_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_tmp_s_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_235_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_cast_fu_243_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_247_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_cast_fu_231_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_268_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_272_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of tmp_11_fu_272_p2 : signal is "no";
    signal tmp_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_367_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_376_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_fu_360_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_360_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_376_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (41 downto 0);

    component cpp_FIR_mul_mul_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cpp_FIR_mac_muladeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (44 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component operator_s_fir1_sbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component operator_s_CFir_c_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component operator_s_fir1_scud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    fir1_shift_reg0_V_U : component operator_s_fir1_sbkb
    generic map (
        DataWidth => 20,
        AddressRange => 3328,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fir1_shift_reg0_V_address0,
        ce0 => fir1_shift_reg0_V_ce0,
        q0 => fir1_shift_reg0_V_q0,
        address1 => fir1_shift_reg0_V_address1,
        ce1 => fir1_shift_reg0_V_ce1,
        we1 => fir1_shift_reg0_V_we1,
        d1 => fir1_shift_reg0_V_d1);

    CFir_c_V_U : component operator_s_CFir_c_V
    generic map (
        DataWidth => 15,
        AddressRange => 3328,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => CFir_c_V_address0,
        ce0 => CFir_c_V_ce0,
        q0 => CFir_c_V_q0);

    fir1_shift_reg1_V_U : component operator_s_fir1_scud
    generic map (
        DataWidth => 20,
        AddressRange => 3328,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fir1_shift_reg1_V_address0,
        ce0 => fir1_shift_reg1_V_ce0,
        q0 => fir1_shift_reg1_V_q0,
        address1 => fir1_shift_reg1_V_address1,
        ce1 => fir1_shift_reg1_V_ce1,
        we1 => fir1_shift_reg1_V_we1,
        d1 => fir1_shift_reg1_V_d1);

    cpp_FIR_mul_mul_6dEe_U1 : component cpp_FIR_mul_mul_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_fu_360_p0,
        din1 => tmp_fu_360_p1,
        dout => tmp_fu_360_p2);

    cpp_FIR_mac_muladeOg_U2 : component cpp_FIR_mac_muladeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 20,
        din2_WIDTH => 45,
        dout_WIDTH => 45)
    port map (
        din0 => reg_191,
        din1 => fir1_shift_reg0_V_lo_reg_456,
        din2 => grp_fu_367_p2,
        dout => grp_fu_367_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_reg_180 <= i_reg_431;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_180 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_168 <= grp_fu_367_p3(44 downto 3);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_s_reg_168 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                CFir_c_V_addr_reg_407 <= tmp_5_fu_199_p1(12 - 1 downto 0);
                fir1_count_load_reg_396 <= fir1_count;
                fir1_shift_reg0_V_ad_reg_418 <= tmp_cast_fu_208_p1(12 - 1 downto 0);
                fir1_shift_reg1_V_ad_reg_423 <= tmp_cast_fu_208_p1(12 - 1 downto 0);
                tmp_4_reg_402 <= tmp_4_fu_204_p1;
                tmp_reg_412 <= tmp_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_1))) then
                fir1_count <= p_tmp_s_fu_293_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                fir1_shift_reg0_V_lo_reg_456 <= fir1_shift_reg0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_431 <= i_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_191 <= CFir_c_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_0))) then
                tmp_10_reg_441 <= tmp_10_fu_257_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_213_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    CFir_c_V_address0_assign_proc : process(CFir_c_V_addr_reg_407, ap_CS_fsm_state2, exitcond_fu_213_p2, tmp_12_cast_fu_252_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((exitcond_fu_213_p2 = ap_const_lv1_1)) then 
                CFir_c_V_address0 <= CFir_c_V_addr_reg_407;
            elsif ((exitcond_fu_213_p2 = ap_const_lv1_0)) then 
                CFir_c_V_address0 <= tmp_12_cast_fu_252_p1(12 - 1 downto 0);
            else 
                CFir_c_V_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            CFir_c_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    CFir_c_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_213_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_0)))) then 
            CFir_c_V_ce0 <= ap_const_logic_1;
        else 
            CFir_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_start <= ap_const_logic_1;
    exitcond_fu_213_p2 <= "1" when (i1_reg_180 = ap_const_lv5_19) else "0";
    fir1_shift_reg0_V_address0 <= tmp_14_cast_fu_277_p1(12 - 1 downto 0);

    fir1_shift_reg0_V_address1_assign_proc : process(ap_CS_fsm_state3, fir1_shift_reg0_V_ad_reg_418, ap_CS_fsm_state2, tmp_13_cast1_fu_307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir1_shift_reg0_V_address1 <= tmp_13_cast1_fu_307_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg0_V_address1 <= fir1_shift_reg0_V_ad_reg_418;
        else 
            fir1_shift_reg0_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    fir1_shift_reg0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg0_V_ce0 <= ap_const_logic_1;
        else 
            fir1_shift_reg0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir1_shift_reg0_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fir1_shift_reg0_V_ce1 <= ap_const_logic_1;
        else 
            fir1_shift_reg0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fir1_shift_reg0_V_d1_assign_proc : process(x_V, fir1_shift_reg0_V_q0, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir1_shift_reg0_V_d1 <= fir1_shift_reg0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg0_V_d1 <= x_V;
        else 
            fir1_shift_reg0_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fir1_shift_reg0_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, exitcond_fu_213_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_1)))) then 
            fir1_shift_reg0_V_we1 <= ap_const_logic_1;
        else 
            fir1_shift_reg0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fir1_shift_reg1_V_address0 <= tmp_14_cast_fu_277_p1(12 - 1 downto 0);

    fir1_shift_reg1_V_address1_assign_proc : process(ap_CS_fsm_state3, fir1_shift_reg1_V_ad_reg_423, ap_CS_fsm_state2, tmp_13_cast1_fu_307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir1_shift_reg1_V_address1 <= tmp_13_cast1_fu_307_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg1_V_address1 <= fir1_shift_reg1_V_ad_reg_423;
        else 
            fir1_shift_reg1_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    fir1_shift_reg1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg1_V_ce0 <= ap_const_logic_1;
        else 
            fir1_shift_reg1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir1_shift_reg1_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fir1_shift_reg1_V_ce1 <= ap_const_logic_1;
        else 
            fir1_shift_reg1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fir1_shift_reg1_V_d1_assign_proc : process(y_V, fir1_shift_reg1_V_q0, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir1_shift_reg1_V_d1 <= fir1_shift_reg1_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir1_shift_reg1_V_d1 <= y_V;
        else 
            fir1_shift_reg1_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fir1_shift_reg1_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, exitcond_fu_213_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_213_p2 = ap_const_lv1_1)))) then 
            fir1_shift_reg1_V_we1 <= ap_const_logic_1;
        else 
            fir1_shift_reg1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_367_p2 <= (p_Val2_s_reg_168 & ap_const_lv3_0);
    i_fu_219_p2 <= std_logic_vector(unsigned(i1_reg_180) + unsigned(ap_const_lv5_1));
    p_tmp_s_fu_293_p3 <= 
        ap_const_lv32_0 when (tmp_1_fu_283_p2(0) = '1') else 
        tmp_2_fu_288_p2;
    tmp_10_fu_257_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_231_p1) + unsigned(tmp_reg_412));
    tmp_11_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_235_p3),13));
    tmp_11_fu_272_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_268_p1) + unsigned(tmp_reg_412));
        tmp_12_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_247_p2),64));

        tmp_13_cast1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_441),64));

        tmp_14_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_272_p2),64));

    tmp_1_fu_283_p2 <= "1" when (fir1_count_load_reg_396 = ap_const_lv32_7F) else "0";
    tmp_2_fu_288_p2 <= std_logic_vector(signed(fir1_count_load_reg_396) + signed(ap_const_lv32_1));
    tmp_3_fu_225_p2 <= std_logic_vector(signed(ap_const_lv5_19) - signed(i1_reg_180));
    tmp_4_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_225_p2),13));
    tmp_4_fu_204_p0 <= fir1_count;
    tmp_4_fu_204_p1 <= tmp_4_fu_204_p0(13 - 1 downto 0);
    tmp_5_fu_199_p0 <= fir1_count;
        tmp_5_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_199_p0),64));

    tmp_6_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_262_p2),13));
    tmp_6_fu_247_p2 <= std_logic_vector(signed(tmp_4_reg_402) + signed(tmp_11_cast_fu_243_p1));
    tmp_9_fu_262_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(i1_reg_180));
        tmp_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_360_p2),64));

    tmp_fu_360_p0 <= ap_const_lv13_1A(6 - 1 downto 0);
    tmp_fu_360_p1 <= tmp_4_fu_204_p0(13 - 1 downto 0);
    tmp_s_fu_235_p3 <= (tmp_3_fu_225_p2 & ap_const_lv7_0);
end behav;
