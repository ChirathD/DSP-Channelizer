// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_s (
        ap_clk,
        ap_rst,
        x_V,
        y_V
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [19:0] x_V;
input  [19:0] y_V;

wire    ap_start;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] fir1_count;
wire   [11:0] fir1_shift_reg0_V_address0;
reg    fir1_shift_reg0_V_ce0;
wire   [19:0] fir1_shift_reg0_V_q0;
reg   [11:0] fir1_shift_reg0_V_address1;
reg    fir1_shift_reg0_V_ce1;
reg    fir1_shift_reg0_V_we1;
reg   [19:0] fir1_shift_reg0_V_d1;
reg   [11:0] CFir_c_V_address0;
reg    CFir_c_V_ce0;
wire   [14:0] CFir_c_V_q0;
wire   [11:0] fir1_shift_reg1_V_address0;
reg    fir1_shift_reg1_V_ce0;
wire   [19:0] fir1_shift_reg1_V_q0;
reg   [11:0] fir1_shift_reg1_V_address1;
reg    fir1_shift_reg1_V_ce1;
reg    fir1_shift_reg1_V_we1;
reg   [19:0] fir1_shift_reg1_V_d1;
reg  signed [14:0] reg_191;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg  signed [31:0] fir1_count_load_reg_396;
wire  signed [12:0] tmp_4_fu_204_p1;
reg  signed [12:0] tmp_4_reg_402;
reg   [11:0] CFir_c_V_addr_reg_407;
wire  signed [12:0] tmp_fu_360_p2;
reg  signed [12:0] tmp_reg_412;
reg   [11:0] fir1_shift_reg0_V_ad_reg_418;
reg   [11:0] fir1_shift_reg1_V_ad_reg_423;
wire   [4:0] i_fu_219_p2;
reg   [4:0] i_reg_431;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_213_p2;
(* use_dsp48 = "no" *) wire   [12:0] tmp_10_fu_257_p2;
reg   [12:0] tmp_10_reg_441;
reg  signed [19:0] fir1_shift_reg0_V_lo_reg_456;
wire    ap_CS_fsm_state4;
reg   [41:0] p_Val2_s_reg_168;
reg   [4:0] i1_reg_180;
wire  signed [63:0] tmp_5_fu_199_p1;
wire  signed [63:0] tmp_cast_fu_208_p1;
wire  signed [63:0] tmp_12_cast_fu_252_p1;
wire  signed [63:0] tmp_14_cast_fu_277_p1;
wire  signed [63:0] tmp_13_cast1_fu_307_p1;
wire   [31:0] p_tmp_s_fu_293_p3;
wire  signed [31:0] tmp_5_fu_199_p0;
wire  signed [31:0] tmp_4_fu_204_p0;
wire   [4:0] tmp_3_fu_225_p2;
wire   [11:0] tmp_s_fu_235_p3;
wire   [12:0] tmp_11_cast_fu_243_p1;
wire   [12:0] tmp_6_fu_247_p2;
wire   [12:0] tmp_4_cast_fu_231_p1;
wire   [4:0] tmp_9_fu_262_p2;
wire   [12:0] tmp_6_cast_fu_268_p1;
(* use_dsp48 = "no" *) wire   [12:0] tmp_11_fu_272_p2;
wire   [0:0] tmp_1_fu_283_p2;
wire   [31:0] tmp_2_fu_288_p2;
wire  signed [44:0] grp_fu_367_p3;
wire  signed [44:0] grp_fu_376_p3;
wire   [5:0] tmp_fu_360_p0;
wire  signed [12:0] tmp_fu_360_p1;
wire   [44:0] grp_fu_367_p2;
reg   [5:0] ap_NS_fsm;
wire  signed [14:0] grp_fu_376_p0;
wire  signed [19:0] grp_fu_376_p1;
wire   [44:0] grp_fu_376_p2;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [41:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 fir1_count = 32'd0;
end

operator_s_fir1_sbkb #(
    .DataWidth( 20 ),
    .AddressRange( 3328 ),
    .AddressWidth( 12 ))
fir1_shift_reg0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir1_shift_reg0_V_address0),
    .ce0(fir1_shift_reg0_V_ce0),
    .q0(fir1_shift_reg0_V_q0),
    .address1(fir1_shift_reg0_V_address1),
    .ce1(fir1_shift_reg0_V_ce1),
    .we1(fir1_shift_reg0_V_we1),
    .d1(fir1_shift_reg0_V_d1)
);

operator_s_CFir_c_V #(
    .DataWidth( 15 ),
    .AddressRange( 3328 ),
    .AddressWidth( 12 ))
CFir_c_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(CFir_c_V_address0),
    .ce0(CFir_c_V_ce0),
    .q0(CFir_c_V_q0)
);

operator_s_fir1_scud #(
    .DataWidth( 20 ),
    .AddressRange( 3328 ),
    .AddressWidth( 12 ))
fir1_shift_reg1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir1_shift_reg1_V_address0),
    .ce0(fir1_shift_reg1_V_ce0),
    .q0(fir1_shift_reg1_V_q0),
    .address1(fir1_shift_reg1_V_address1),
    .ce1(fir1_shift_reg1_V_ce1),
    .we1(fir1_shift_reg1_V_we1),
    .d1(fir1_shift_reg1_V_d1)
);

cpp_FIR_mul_mul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
cpp_FIR_mul_mul_6dEe_U1(
    .din0(tmp_fu_360_p0),
    .din1(tmp_fu_360_p1),
    .dout(tmp_fu_360_p2)
);

cpp_FIR_mac_muladeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 45 ),
    .dout_WIDTH( 45 ))
cpp_FIR_mac_muladeOg_U2(
    .din0(reg_191),
    .din1(fir1_shift_reg0_V_lo_reg_456),
    .din2(grp_fu_367_p2),
    .dout(grp_fu_367_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_reg_180 <= i_reg_431;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i1_reg_180 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_168 <= {{grp_fu_367_p3[44:3]}};
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_168 <= 42'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        CFir_c_V_addr_reg_407 <= tmp_5_fu_199_p1;
        fir1_count_load_reg_396 <= fir1_count;
        fir1_shift_reg0_V_ad_reg_418 <= tmp_cast_fu_208_p1;
        fir1_shift_reg1_V_ad_reg_423 <= tmp_cast_fu_208_p1;
        tmp_4_reg_402 <= tmp_4_fu_204_p1;
        tmp_reg_412 <= tmp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd1))) begin
        fir1_count <= p_tmp_s_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir1_shift_reg0_V_lo_reg_456 <= fir1_shift_reg0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_431 <= i_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_191 <= CFir_c_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd0))) begin
        tmp_10_reg_441 <= tmp_10_fu_257_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((exitcond_fu_213_p2 == 1'd1)) begin
            CFir_c_V_address0 = CFir_c_V_addr_reg_407;
        end else if ((exitcond_fu_213_p2 == 1'd0)) begin
            CFir_c_V_address0 = tmp_12_cast_fu_252_p1;
        end else begin
            CFir_c_V_address0 = 'bx;
        end
    end else begin
        CFir_c_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd0)))) begin
        CFir_c_V_ce0 = 1'b1;
    end else begin
        CFir_c_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir1_shift_reg0_V_address1 = tmp_13_cast1_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg0_V_address1 = fir1_shift_reg0_V_ad_reg_418;
    end else begin
        fir1_shift_reg0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg0_V_ce0 = 1'b1;
    end else begin
        fir1_shift_reg0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        fir1_shift_reg0_V_ce1 = 1'b1;
    end else begin
        fir1_shift_reg0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir1_shift_reg0_V_d1 = fir1_shift_reg0_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg0_V_d1 = x_V;
    end else begin
        fir1_shift_reg0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd1)))) begin
        fir1_shift_reg0_V_we1 = 1'b1;
    end else begin
        fir1_shift_reg0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir1_shift_reg1_V_address1 = tmp_13_cast1_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg1_V_address1 = fir1_shift_reg1_V_ad_reg_423;
    end else begin
        fir1_shift_reg1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg1_V_ce0 = 1'b1;
    end else begin
        fir1_shift_reg1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        fir1_shift_reg1_V_ce1 = 1'b1;
    end else begin
        fir1_shift_reg1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir1_shift_reg1_V_d1 = fir1_shift_reg1_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fir1_shift_reg1_V_d1 = y_V;
    end else begin
        fir1_shift_reg1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd1)))) begin
        fir1_shift_reg1_V_we1 = 1'b1;
    end else begin
        fir1_shift_reg1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_213_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_start = 1'b1;

assign exitcond_fu_213_p2 = ((i1_reg_180 == 5'd25) ? 1'b1 : 1'b0);

assign fir1_shift_reg0_V_address0 = tmp_14_cast_fu_277_p1;

assign fir1_shift_reg1_V_address0 = tmp_14_cast_fu_277_p1;

assign grp_fu_367_p2 = {{p_Val2_s_reg_168}, {3'd0}};

assign i_fu_219_p2 = (i1_reg_180 + 5'd1);

assign p_tmp_s_fu_293_p3 = ((tmp_1_fu_283_p2[0:0] === 1'b1) ? 32'd0 : tmp_2_fu_288_p2);

assign tmp_10_fu_257_p2 = ($signed(tmp_4_cast_fu_231_p1) + $signed(tmp_reg_412));

assign tmp_11_cast_fu_243_p1 = tmp_s_fu_235_p3;

assign tmp_11_fu_272_p2 = ($signed(tmp_6_cast_fu_268_p1) + $signed(tmp_reg_412));

assign tmp_12_cast_fu_252_p1 = $signed(tmp_6_fu_247_p2);

assign tmp_13_cast1_fu_307_p1 = $signed(tmp_10_reg_441);

assign tmp_14_cast_fu_277_p1 = $signed(tmp_11_fu_272_p2);

assign tmp_1_fu_283_p2 = ((fir1_count_load_reg_396 == 32'd127) ? 1'b1 : 1'b0);

assign tmp_2_fu_288_p2 = ($signed(fir1_count_load_reg_396) + $signed(32'd1));

assign tmp_3_fu_225_p2 = ($signed(5'd25) - $signed(i1_reg_180));

assign tmp_4_cast_fu_231_p1 = tmp_3_fu_225_p2;

assign tmp_4_fu_204_p0 = fir1_count;

assign tmp_4_fu_204_p1 = tmp_4_fu_204_p0[12:0];

assign tmp_5_fu_199_p0 = fir1_count;

assign tmp_5_fu_199_p1 = tmp_5_fu_199_p0;

assign tmp_6_cast_fu_268_p1 = tmp_9_fu_262_p2;

assign tmp_6_fu_247_p2 = ($signed(tmp_4_reg_402) + $signed(tmp_11_cast_fu_243_p1));

assign tmp_9_fu_262_p2 = ($signed(5'd24) - $signed(i1_reg_180));

assign tmp_cast_fu_208_p1 = tmp_fu_360_p2;

assign tmp_fu_360_p0 = 13'd26;

assign tmp_fu_360_p1 = tmp_4_fu_204_p0[12:0];

assign tmp_s_fu_235_p3 = {{tmp_3_fu_225_p2}, {7'd0}};

endmodule //operator_s
